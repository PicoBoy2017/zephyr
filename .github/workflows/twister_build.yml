name: Twister build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      runner:
        required: true
        type: string
      board:
        required: false
        type: string
      image:
        required: true
        type: string
      options:
        required: true
        type: string
      zephyr_sdk_install_dir:
        required: true
        type: string
      twister_common:
        required: true
        type: string
      is_build_only:
        required: true
        type: boolean

jobs:
  twister-build:
    name: ${{ inputs.name }}
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.image }}
      options: ${{ inputs.options }}
    env:
      ZEPHYR_SDK_INSTALL_DIR: ${{ inputs.zephyr_sdk_install_dir }}
      BSIM_OUT_PATH: /opt/bsim/
      BSIM_COMPONENTS_PATH: /opt/bsim/components
      TWISTER_COMMON: ${{ inputs.twister_common }}
      DAILY_OPTIONS: ' -M --build-only --all --show-footprint'
      PR_OPTIONS: ' --clobber-output --integration'
      PR_EXCLUDE_OPTIONS: ' -e mcumgr -e cmsis_dsp -e net -e posix -e kernel -e bluetooth -e test_framework'
      PUSH_OPTIONS: ' --clobber-output -M --show-footprint'
      COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      BASE_REF: ${{ github.base_ref }}
    steps:
      - name: Remove Possible Existing Access Token
        continue-on-error: true
        run: |
          # Token is generated at the run time and at the end of process it is expires,
          # storing it in global config causes duplication line in config file
          # so that possible existing one shall be deleted before generating new one
          # otherwiser autantication will be failed.
          existingTokenURL=$(git config --global --get-regexp url.*@github.com/.insteadOf)
          echo "All Token:${existingTokenURL}"
          for item in $(echo ${existingTokenURL}); do
            if [ ${item} == "https://github.com/" ]; then
              continue
            fi
            echo "Removing: ${item}"
            git config --global --unset-all "${item}"
          done

      - name: Get Access Token
        id: generate-github-app-token
        uses: adi-innersource/shared-actions/generate-github-token@v1
        with:
          app-id: ${{ secrets.TOKEN_GENERATOR_APP_ID }}
          private-key: ${{ secrets.TOKEN_GENERATOR_APP_PRIVATE_KEY }}
          organization: ${{ github.repository_owner }}
          repositories: |
            zephyr
            zephyr-runner-configurations
            hal_adi
            packetcraft-adi
            trusted-firmware-m
            trusted-firmware-a
            tf-m-tests
            psa-arch-tests

      - name: Apply container owner mismatch workaround
        run: |
          # FIXME: The owner UID of the GITHUB_WORKSPACE directory may not
          #        match the container user UID because of the way GitHub
          #        Actions runner is implemented. Remove this workaround when
          #        GitHub comes up with a fundamental fix for this problem.
          git config --global --add safe.directory ${GITHUB_WORKSPACE}

      - name: Clone cached Zephyr repository
        continue-on-error: true
        run: |
          git clone --shared /github/cache/zephyrproject/zephyr .
          git remote set-url origin ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false

      - name: Environment Setup
        env:
          ACCESS_TOKEN: ${{ steps.generate-github-app-token.outputs.access-token }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            git config --global user.email "bot@zephyrproject.org"
            git config --global user.name "Zephyr Builder"
            rm -fr ".git/rebase-apply"
            rm -fr ".git/rebase-merge"
            git rebase origin/${BASE_REF}
            git clean -f -d
            git log  --pretty=oneline | head -n 10
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          git config --global url."https://${ACCESS_TOKEN}:${ACCESS_TOKEN}@github.com/".insteadOf "https://github.com/"
          west init -l . || true
          west config manifest.group-filter -- +ci,+optional
          west config --global update.narrow true
          west update --path-cache /github/cache/zephyrproject 2>&1 1> west.update.log || west update --path-cache /github/cache/zephyrproject 2>&1 1> west.update.log || ( rm -rf ../modules ../bootloader ../tools && west update --path-cache /github/cache/zephyrproject)
          west forall -c 'git reset --hard HEAD'

      - if: ${{ !inputs.is_build_only }}
        name: Get Runner Configurations
        run: |
          git clone https://github.com/adi-innersource/zephyr-runner-configurations.git

      - if: ${{ !inputs.is_build_only }}
        name: Install J-Link Configurations
        run: |
          if [ -d /root/.config/SEGGER ]; then
            mkdir -p $HOME/.config
            cp -rf /root/.config/SEGGER $HOME/.config/
          fi

      - name: Check Environment
        run: |
          cmake --version
          gcc --version
          ls -la
          echo "github.ref: ${{ github.ref }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"

      - name: Prepare ccache timestamp/data
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          string(REPLACE "/" "_" repo ${{ github.repository }})
          string(REPLACE "-" "_" repo2 ${repo})
          file(APPEND $ENV{GITHUB_OUTPUT} "repo=${repo2}\n")

      - name: use cache
        id: cache-ccache
        uses: zephyrproject-rtos/action-s3-cache@v1.2.0
        continue-on-error: true
        with:
          key: ${{ steps.ccache_cache_timestamp.outputs.repo }}-${{ github.ref_name }}-${{ github.event_name }}-${{ matrix.subset }}-ccache
          path: /github/home/.cache/ccache
          aws-s3-bucket: ccache.zephyrproject.org
          aws-access-key-id: ${{ vars.AWS_CCACHE_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CCACHE_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: ccache stats initial
        run: |
          mkdir -p /github/home/.cache
          test -d github/home/.cache/ccache && rm -rf /github/home/.cache/ccache && mv github/home/.cache/ccache /github/home/.cache/ccache
          ccache -M 10G -s

      - if: github.event_name == 'push' && !inputs.is_build_only
        name: Run Tests with Twister (Push)
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          ./scripts/twister --device-testing --hardware-map ./zephyr-runner-configurations/${{ inputs.runner }}.yml ${TWISTER_COMMON} ${PUSH_OPTIONS}
          if [ "${{ matrix.subset }}" = "1" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PUSH_OPTIONS}
            fi
          fi

      - if: github.event_name == 'push' && inputs.is_build_only
        name: Run Tests with Twister Build Only (Push)
        run: |
          rm -f testplan.json
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          ./scripts/twister -p ${{ inputs.board }} ${TWISTER_COMMON} --clobber-output -M --build-only --show-footprint
          if [ "${{ matrix.subset }}" = "1" -a ${{ needs.twister-build-prep.outputs.fullrun }} = 'True' ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} --clobber-output -M --build-only --show-footprint
            fi
          fi

      - if: github.event_name == 'pull_request_target' && inputs.is_build_only
        name: Run Tests with Twister Build Only (Pull Request)
        run: |
          rm -f testplan.json
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          ./scripts/twister -p ${{ inputs.board }} ${TWISTER_COMMON} --clobber-output -M --build-only --show-footprint
          if [ "${{ matrix.subset }}" = "1" -a ${{ needs.twister-build-prep.outputs.fullrun }} = 'True' ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} --clobber-output -M --build-only --show-footprint
            fi
          fi

      - if: github.event_name == 'pull_request_target' && !inputs.is_build_only
        name: Run Tests with Twister (Pull Request)
        run: |
          rm -f testplan.json
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          ./scripts/twister --device-testing --hardware-map ./zephyr-runner-configurations/${{ inputs.runner }}.yml  ${TWISTER_COMMON} ${PR_OPTIONS} ${PR_EXCLUDE_OPTIONS}
          if [ "${{ matrix.subset }}" = "1" -a ${{ needs.twister-build-prep.outputs.fullrun }} = 'True' ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PR_OPTIONS}
            fi
          fi

      - if: github.event_name == 'schedule' && !inputs.is_build_only
        name: Run Tests with Twister (Daily)
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          ./scripts/twister --device-testing --hardware-map ./zephyr-runner-configurations/${{ inputs.runner }}.yml ${TWISTER_COMMON} ${DAILY_OPTIONS}
          if [ "${{ matrix.subset }}" = "1" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${DAILY_OPTIONS}
            fi
          fi

      - name: ccache stats post
        run: |
          ccache -p
          ccache -s

      - name: Set Artifact Name
        if: always()
        run: |
          if [ "${{ inputs.is_build_only }}" = "true" ]; then
            BOARD_NAME=$(echo "${{ inputs.board }}" | sed 's/\//_/g')
            echo "ARTIFACT_NAME=$BOARD_NAME" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=${{ inputs.runner }}" >> $GITHUB_ENV
          fi

      - name: Rename Unit Test Results
        if: always()
        continue-on-error: true
        run: |
          mv twister-out/twister.xml twister-out/twister_${{ env.ARTIFACT_NAME }}.xml
          mv twister-out/twister.json twister-out/twister_${{ env.ARTIFACT_NAME }}.json
          mv module_tests/twister.xml module_tests/twister_${{ env.ARTIFACT_NAME }}.xml
          mv testplan.json testplan_${{ env.ARTIFACT_NAME }}.json

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Unit Test Results (Subset ${{ env.ARTIFACT_NAME }})
          if-no-files-found: ignore
          path: |
            twister-out/twister_${{ env.ARTIFACT_NAME }}.xml
            twister-out/twister_${{ env.ARTIFACT_NAME }}.json
            module_tests/twister_${{ env.ARTIFACT_NAME }}.xml
            testplan_${{ env.ARTIFACT_NAME }}.json
